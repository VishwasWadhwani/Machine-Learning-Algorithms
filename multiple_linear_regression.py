# -*- coding: utf-8 -*-
"""Multiple Linear Regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C1o8Q9J7cLDpcSz-0EhQcRPBhoBEXsuz
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import scipy as sp
import seaborn as sns
import statsmodels.api as sm
import statsmodels.tsa.api as smt
import warnings
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

data = pd.read_csv('/content/multiple_linear_regression.csv')
data.head()

data.info()

"""Data Processing"""

data = data.dropna()
data.shape

"""Splitting"""

output_col = "Target"

x = data.iloc[:, data.columns != output_col]
#x = data.iloc[:, [0, 1]]

y = data.loc[:, output_col]

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test =  train_test_split(x, y, test_size = 0.30, random_state = 43)

"""Linear Regression"""

from sklearn.linear_model import LinearRegression

lr = LinearRegression()
lr.fit(x_train, y_train)

lr.coef_

lr.intercept_

"""Predicting Test_input"""

predicted_value = lr.predict(x_test)
y_pred = predicted_value

from sklearn.metrics import mean_squared_error

cost = mean_squared_error(y_test, predicted_value)

cost

plt.plot(x_test, y_test, "*", color = "green")
plt.plot(x_test, predicted_value, "+", color = "red")
plt.title("Performance testing")
plt.xlabel("Input")
plt.xticks(np.linspace(1, 500, 10))
plt.ylabel("Output")
plt.show()

"""Linear Model Assumptions

Homoscedasticity
"""

residual = y_test - y_pred

fig, ax = plt.subplots(figsize = (6, 3))
ax.scatter(y_pred, residual)

"""Normality of Residuals"""

sns.distplot(residual)

"""Linear Regression with OLS Summary"""

x_with_constant = sm.add_constant(x_train)

x_with_constant

model = sm.OLS(y_train, x_with_constant)

result = model.fit()

result.params

print(result.summary())

x_test = sm.add_constant(x_test)

y_pred = result.predict(x_test)

residual = y_test - y_pred

residual

